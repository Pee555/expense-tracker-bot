// pages/api/webhook.js
import crypto from 'crypto';

export default async function handler(req, res) {
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, x-line-signature');

  // Handle preflight requests
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö method
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method not allowed' });
  }

  try {
    console.log('Webhook received:', {
      headers: req.headers,
      body: req.body
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LINE Signature
    const signature = req.headers['x-line-signature'];
    const channelSecret = process.env.LINE_CHANNEL_SECRET;
    
    if (!channelSecret) {
      console.error('Channel secret not configured');
      return res.status(500).json({ error: 'Channel secret not configured' });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á signature ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    const body = JSON.stringify(req.body);
    const hash = crypto
      .createHmac('SHA256', channelSecret)
      .update(body)
      .digest('base64');

    // ‡πÉ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤ ‡∏≠‡∏≤‡∏à‡∏Ç‡πâ‡∏≤‡∏° signature check ‡∏Å‡πà‡∏≠‡∏ô
    // if (signature !== hash) {
    //   console.error('Invalid signature');
    //   return res.status(401).json({ error: 'Invalid signature' });
    // }

    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• events ‡∏à‡∏≤‡∏Å LINE
    const events = req.body.events || [];
    console.log('Processing events:', events.length);
    
    for (const event of events) {
      console.log('Event type:', event.type);
      
      if (event.type === 'message') {
        if (event.message.type === 'image') {
          console.log('Image message received');
          await handleImageMessage(event);
        } else if (event.message.type === 'text') {
          console.log('Text message:', event.message.text);
          await handleTextMessage(event);
        }
      }
    }

    res.status(200).json({ message: 'OK' });
  } catch (error) {
    console.error('Webhook error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
}

async function handleImageMessage(event) {
  console.log('Processing image from user:', event.source.userId);
  
  try {
    // TODO: ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å LINE
    // TODO: ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢ OCR
    // TODO: ‡∏™‡πà‡∏á‡πÑ‡∏õ AI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    // TODO: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Supabase
    
    await replyMessage(event.replyToken, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à...');
  } catch (error) {
    console.error('Error processing image:', error);
    await replyMessage(event.replyToken, '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ');
  }
}

async function handleTextMessage(event) {
  const userMessage = event.message.text.toLowerCase();
  
  try {
    if (userMessage.includes('‡∏™‡∏£‡∏∏‡∏õ') || userMessage.includes('‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô')) {
      // TODO: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Supabase
      await replyMessage(event.replyToken, '‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: 0 ‡∏ö‡∏≤‡∏ó\n(‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)');
    } else if (userMessage.includes('‡∏ä‡πà‡∏ß‡∏¢') || userMessage.includes('help')) {
      const helpMessage = `üìù ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Expense Tracker Bot:

1. üì∏ ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏°‡∏≤
2. ü§ñ ‡∏£‡∏≠‡πÉ‡∏´‡πâ AI ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
3. üìä ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏™‡∏£‡∏∏‡∏õ" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô

‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:
‚Ä¢ ‡∏™‡∏£‡∏∏‡∏õ - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
‚Ä¢ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
‚Ä¢ ‡∏ä‡πà‡∏ß‡∏¢ - ‡∏î‡∏π‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥`;
      
      await replyMessage(event.replyToken, helpMessage);
    } else {
      await replyMessage(event.replyToken, 'üëã ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏â‡∏±‡∏ô‡∏î‡∏π‡∏´‡∏ô‡πà‡∏≠‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ä‡πà‡∏ß‡∏¢" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ');
    }
  } catch (error) {
    console.error('Error handling text message:', error);
    await replyMessage(event.replyToken, '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°');
  }
}

async function replyMessage(replyToken, message) {
  const accessToken = process.env.LINE_CHANNEL_ACCESS_TOKEN;
  
  if (!accessToken) {
    console.error('LINE access token not configured');
    return;
  }

  try {
    const response = await fetch('https://api.line.me/v2/bot/message/reply', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${accessToken}`
      },
      body: JSON.stringify({
        replyToken: replyToken,
        messages: [{
          type: 'text',
          text: message
        }]
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Failed to send LINE message:', response.status, errorText);
    } else {
      console.log('Message sent successfully');
    }
  } catch (error) {
    console.error('Error sending LINE message:', error);
  }
}