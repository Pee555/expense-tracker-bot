import { lineClient, lineHelpers } from '../../lib/line'
import { groqHelpers } from '../../lib/groq'
import { dbHelpers } from '../../lib/supabase'
import crypto from 'crypto'

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method not allowed' })
  }

  // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ LINE signature
  const signature = req.headers['x-line-signature']
  const body = JSON.stringify(req.body)
  
  const expectedSignature = crypto
    .createHmac('sha256', process.env.LINE_CHANNEL_SECRET)
    .update(body)
    .digest('base64')
  
  if (signature !== expectedSignature) {
    return res.status(401).json({ message: 'Invalid signature' })
  }

  try {
    const events = req.body.events
    
    for (const event of events) {
      await handleEvent(event)
    }
    
    res.status(200).json({ message: 'OK' })
  } catch (error) {
    console.error('Webhook error:', error)
    res.status(500).json({ error: error.message })
  }
}

async function handleEvent(event) {
  const { type, replyToken, source, message } = event
  const userId = source.userId

  try {
    if (type === 'message') {
      if (message.type === 'image') {
        // р╕гр╕▒р╕Ър╕гр╕╣р╕Ыр╕ар╕▓р╕Юр╣Гр╕Ър╣Ар╕кр╕гр╣Зр╕И
        await handleImageMessage(replyToken, userId, message.id)
      } else if (message.type === 'text') {
        // р╕гр╕▒р╕Ър╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б
        await handleTextMessage(replyToken, userId, message.text)
      }
    }
  } catch (error) {
    console.error('Event handling error:', error)
    await lineHelpers.replyMessage(
      replyToken, 
      'р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф р╕Бр╕гр╕╕р╕Ур╕▓р╕ер╕нр╕Зр╣Гр╕лр╕бр╣Ир╕нр╕╡р╕Бр╕Др╕гр╕▒р╣Йр╕З'
    )
  }
}

async function handleImageMessage(replyToken, userId, messageId) {
  try {
    // р╣Бр╕Ир╣Йр╕Зр╕зр╣Ир╕▓р╕Бр╕│р╕ер╕▒р╕Зр╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕е
    await lineHelpers.replyMessage(
      replyToken, 
      'р╕Бр╕│р╕ер╕▒р╕Зр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╣Гр╕Ър╣Ар╕кр╕гр╣Зр╕И р╕Бр╕гр╕╕р╕Ур╕▓р╕гр╕нр╕кр╕▒р╕Бр╕Др╕гр╕╣р╣И...'
    )

    // р╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Фр╕гр╕╣р╕Ыр╕ар╕▓р╕Ю
    const imageBuffer = await lineHelpers.downloadImage(messageId)
    const imageBase64 = imageBuffer.toString('base64')
    
    // р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╕гр╕╣р╕Ыр╣Др╕Ыр╕вр╕▒р╕З Supabase Storage
    const fileName = `${userId}_${Date.now()}.jpg`
    const imageUrl = await dbHelpers.uploadImage(imageBuffer, fileName)
    
    // р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╣Гр╕Ър╣Ар╕кр╕гр╣Зр╕Ир╕Фр╣Йр╕зр╕в Groq AI
    const analysis = await groqHelpers.analyzeReceipt(imageBase64)
    
    // р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╕Зр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е
    const receipt = await dbHelpers.saveReceipt(
      userId,
      imageUrl,
      analysis.total_amount,
      analysis.date || new Date().toISOString().split('T')[0]
    )
    
    if (analysis.items && analysis.items.length > 0) {
      await dbHelpers.saveItems(receipt.id, analysis.items)
    }
    
    // р╕кр╣Ир╕Зр╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣Мр╕Бр╕ер╕▒р╕Ъ
    const resultMessage = createReceiptSummary(analysis)
    await lineHelpers.pushMessage(userId, resultMessage)
    
  } catch (error) {
    console.error('Image processing error:', error)
    await lineHelpers.pushMessage(
      userId, 
      'р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╣Гр╕Ър╣Ар╕кр╕гр╣Зр╕Ир╣Др╕Фр╣Й р╕Бр╕гр╕╕р╕Ур╕▓р╕Цр╣Ир╕▓р╕вр╕гр╕╣р╕Ыр╣Гр╕лр╕бр╣Ир╣Гр╕лр╣Йр╕Кр╕▒р╕Фр╕Вр╕╢р╣Йр╕Щ'
    )
  }
}

async function handleTextMessage(replyToken, userId, text) {
  const message = text.toLowerCase().trim()
  
  if (message.includes('р╕кр╕гр╕╕р╕Ы') || message.includes('summary')) {
    // р╕Вр╕нр╕кр╕гр╕╕р╕Ыр╕гр╕▓р╕вр╕зр╕▒р╕Щ
    const today = new Date().toISOString().split('T')[0]
    const dailyData = await dbHelpers.getDailySummary(userId, today)
    
    if (dailyData.length === 0) {
      await lineHelpers.replyMessage(
        replyToken, 
        'р╕зр╕▒р╕Щр╕Щр╕╡р╣Йр╕вр╕▒р╕Зр╣Др╕бр╣Ир╕бр╕╡р╕Бр╕▓р╕гр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╣Гр╕Ър╣Ар╕кр╕гр╣Зр╕И'
      )
      return
    }
    
    const summary = calculateDailySummary(dailyData)
    const summaryMessage = lineHelpers.createSummaryMessage(summary)
    
    await lineHelpers.replyMessage(replyToken, summaryMessage)
    
  } else if (message.includes('р╣Ар╕Фр╕╖р╕нр╕Щ') || message.includes('month')) {
    // р╕Вр╕нр╕кр╕гр╕╕р╕Ыр╕гр╕▓р╕вр╣Ар╕Фр╕╖р╕нр╕Щ
    const now = new Date()
    const monthlyData = await dbHelpers.getMonthlySummary(
      userId, 
      now.getFullYear(), 
      now.getMonth() + 1
    )
    
    if (monthlyData.length === 0) {
      await lineHelpers.replyMessage(
        replyToken, 
        'р╣Ар╕Фр╕╖р╕нр╕Щр╕Щр╕╡р╣Йр╕вр╕▒р╕Зр╣Др╕бр╣Ир╕бр╕╡р╕Бр╕▓р╕гр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╣Гр╕Ър╣Ар╕кр╕гр╣Зр╕И'
      )
      return
    }
    
    const summary = calculateMonthlySummary(monthlyData)
    await lineHelpers.replyMessage(replyToken, summary)
    
  } else {
    // р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Ир╕зр╣Др╕Ы
    await lineHelpers.replyMessage(
      replyToken, 
      'р╕кр╕зр╕▒р╕кр╕Фр╕╡р╕Др╕гр╕▒р╕Ъ! ЁЯУ▒\n\nр╕кр╣Ир╕Зр╕гр╕╣р╕Ыр╣Гр╕Ър╣Ар╕кр╕гр╣Зр╕Ир╕бр╕▓р╣Гр╕лр╣Йр╕Ьр╕бр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╣Др╕Фр╣Йр╣Ар╕ер╕в\n\nр╕лр╕гр╕╖р╕нр╕Юр╕┤р╕бр╕Юр╣М:\nтАв "р╕кр╕гр╕╕р╕Ы" - р╕Фр╕╣р╕кр╕гр╕╕р╕Ыр╕зр╕▒р╕Щр╕Щр╕╡р╣Й\nтАв "р╣Ар╕Фр╕╖р╕нр╕Щ" - р╕Фр╕╣р╕кр╕гр╕╕р╕Ыр╣Ар╕Фр╕╖р╕нр╕Щр╕Щр╕╡р╣Й'
    )
  }
}

function createReceiptSummary(analysis) {
  let message = `тЬЕ р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╣Гр╕Ър╣Ар╕кр╕гр╣Зр╕Ир╣Ар╕кр╕гр╣Зр╕Ир╣Бр╕ер╣Йр╕з!\n\n`
  
  if (analysis.store_name) {
    message += `ЁЯПк р╕гр╣Йр╕▓р╕Щ: ${analysis.store_name}\n`
  }
  
  if (analysis.date) {
    message += `ЁЯУЕ р╕зр╕▒р╕Щр╕Чр╕╡р╣И: ${analysis.date}\n`
  }
  
  message += `ЁЯТ░ р╕вр╕нр╕Фр╕гр╕зр╕б: ${analysis.total_amount?.toLocaleString() || 'р╣Др╕бр╣Ир╕гр╕░р╕Ър╕╕'} р╕Ър╕▓р╕Ч\n\n`
  
  if (analysis.items && analysis.items.length > 0) {
    message += `ЁЯУЭ р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕кр╕┤р╕Щр╕Др╣Йр╕▓:\n`
    analysis.items.forEach(item => {
      message += `тАв ${item.name} - ${item.price?.toLocaleString()} р╕Ър╕▓р╕Ч\n`
    })
  }
  
  message += `\nЁЯТб р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Цр╕╣р╕Бр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╣Бр╕ер╣Йр╕з р╕Юр╕┤р╕бр╕Юр╣М "р╕кр╕гр╕╕р╕Ы" р╣Ар╕Юр╕╖р╣Ир╕нр╕Фр╕╣р╕кр╕гр╕╕р╕Ыр╕зр╕▒р╕Щр╕Щр╕╡р╣Й`
  
  return message
}

function calculateDailySummary(receipts) {
  const total = receipts.reduce((sum, receipt) => sum + parseFloat(receipt.total_amount || 0), 0)
  
  return {
    date: new Date().toLocaleDateString('th-TH'),
    receiptCount: receipts.length,
    totalAmount: total
  }
}

function calculateMonthlySummary(receipts) {
  const total = receipts.reduce((sum, receipt) => sum + parseFloat(receipt.total_amount || 0), 0)
  const itemCount = receipts.reduce((sum, receipt) => sum + (receipt.items?.length || 0), 0)
  
  return `ЁЯУК р╕кр╕гр╕╕р╕Ыр╣Ар╕Фр╕╖р╕нр╕Щр╕Щр╕╡р╣Й\n\nЁЯТ░ р╕вр╕нр╕Фр╕гр╕зр╕б: ${total.toLocaleString()} р╕Ър╕▓р╕Ч\nЁЯУЛ р╕Ир╕│р╕Щр╕зр╕Щр╣Гр╕Ър╣Ар╕кр╕гр╣Зр╕И: ${receipts.length} р╣Гр╕Ъ\nЁЯЫНя╕П р╕Ир╕│р╕Щр╕зр╕Щр╕гр╕▓р╕вр╕Бр╕▓р╕г: ${itemCount} р╕гр╕▓р╕вр╕Бр╕▓р╕г`
}